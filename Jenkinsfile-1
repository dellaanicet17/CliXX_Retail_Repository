pipeline {
    agent any
    tools {
    jdk 'JDK11'  // Use the name you gave your JDK in the Global Tool Configuration
    }

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
        INSTANCE_ID = credentials('INSTANCE_ID')
        DB_SNAPSHOT = credentials('DB_SNAPSHOT')

    }

    stages {
        stage('SonarQube Scan') {
            steps {
                script {
                    scannerHome = tool 'sonarqube'
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQubeScanner') {

                        script {
                            // Prepare SonarQube command with exclusions if available
                            def sonarCmd = "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=CliXX-APP-DELLA -Dsonar.login=${SONAR_TOKEN}"
                    
                            // Only add exclusions if it's not empty
                            if (env.SONAR_EXCLUSIONS?.trim()) {
                                sonarCmd += " -Dsonar.exclusions=${env.SONAR_EXCLUSIONS}"
                            }

                            // Run the SonarQube scan
                            sh sonarCmd
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                retry(2) {
                    timeout(time: 5, unit: 'MINUTES') {
                        //waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerHome = tool 'docker-inst'
                }
                //sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
                sh "docker build . -t clixx-image:$VERSION"
                sh "docker tag clixx-image:$VERSION clixx-image:latest"
            }
        }

        stage('Start Docker Image') {
            steps {
                sh '''
                    if docker ps | grep clixx-cont; then
                        echo "Docker image exists, killing it"
                        docker stop clixx-cont
                        docker rm clixx-cont
                        docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                    else
                        docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                    fi
                '''
            }
        }

        stage('Restore CliXX Database') {
            steps {
                script {
                        sh '''
                            python3 -m venv python3-virtualenv
                            source python3-virtualenv/bin/activate
                            python3 --version
                            pip install --upgrade pip
                            pip install --upgrade ansible
                            pip install --upgrade boto3 botocore boto
                            ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
                            deactivate
                        '''
                }
            }
        }

        stage('Configure DB Instance') {
            steps {
                script {
                    def userInput = input(id: 'confirm', message: 'Is DB creation complete?', parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Complete?', name: 'confirm']
                    ])
                }
                withCredentials([
                    string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                    string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),
                    string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE')

                ]) {
                    sh '''
                        USERNAME=${DB_USER_NAME}
                        PASSWORD=${DB_PASSWORD}
                        DBNAME=${DB_NAME}
                        SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                        SERVER_INSTANCE=${SERVER_INSTANCE}

                        # Write SQL commands to the db.setup file
                        echo "use $DBNAME;" >> "$WORKSPACE/db.setup"
                        echo "UPDATE wp_options SET option_value = '${SERVER_IP}' WHERE option_name = 'home';" >> "$WORKSPACE/db.setup"
                        echo "UPDATE wp_options SET option_value = '${SERVER_IP}' WHERE option_name = 'siteurl';" >> "$WORKSPACE/db.setup"
                        echo "UPDATE wp_options SET option_value = '${SERVER_IP}' WHERE option_name = 'ping_sites';" >> "$WORKSPACE/db.setup"
                        echo "UPDATE wp_options SET option_value = '${SERVER_IP}' WHERE option_name = 'open_shop_header_retina_logo';" >> "$WORKSPACE/db.setup"

                        # Execute the SQL commands via MySQL
                        mysql -u "$USERNAME" --password="$PASSWORD" -h "$SERVER_INSTANCE" -D "$DBNAME" < "$WORKSPACE/db.setup"
                    '''
                }
            }
        }

        stage('Tear Down CliXX Docker Image and Database') {
            steps {
                script {
                    def userInput = input(id: 'confirm', message: 'Tear Down Environment?', parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm']
                    ])
                }
                sh '''
                    python3 -m venv python3-virtualenv
                    source python3-virtualenv/bin/activate
                    python3 --version
                    pip3 install --upgrade pip
                    pip3 install ansible
                    pip3 install boto3 botocore boto
                    ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml 
                    deactivate
                    docker stop clixx-cont
                    docker rm clixx-cont
                '''
            }
        }

        stage('Log Into ECR and Push the Newly Created Docker') {

            steps {

                script {
                    def userInput = input(id: 'confirm', message: 'Push Image To ECR?', parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm']
                    ])
                }
                withCredentials([string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO')]) {
                    sh '''
                        aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO}
                        docker tag clixx-image:$VERSION ${ECR_REPO}:clixx-image-$VERSION
                        docker tag clixx-image:$VERSION ${ECR_REPO}:latest
                        docker images 
                        docker push ${ECR_REPO}:clixx-image-$VERSION
                        docker push ${ECR_REPO}:latest
                    '''
                }
            }
        }
    }
}


def getSonarPath() {
    def SonarHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}

def getDockerPath() {
    def DockerHome = tool name: 'docker-inst', type: 'dockerTool'
    return DockerHome
}