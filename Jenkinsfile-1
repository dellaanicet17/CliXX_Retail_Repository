pipeline {
    agent any
 
    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }
 
    stages {
        stage('Sonarcube Scan') {
            steps {
                script {
                    scannerHome = tool 'sonarqube'
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQubeScanner') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=CliXX-APP-DELLA \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }
 
        stage('Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 3, unit: 'MINUTES') {
                            def qualityGateResult = waitForQualityGate abortPipeline: false
                            echo "Quality Gate check result: ${qualityGateResult}"
                        }
                    } catch (err) {
                        echo "Quality Gate check timed out or failed. Continuing without aborting."
                    }
                }
            }
        }
 
        stage('Build Docker Image') {
            steps {
                script {
                    dockerHome = tool 'docker-inst'
                    sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION"
                }
            }
        }
 
        stage('Starting Docker Image') {
            steps {
                sh '''
                if docker ps | grep -q clixx-cont; then
                    echo "Docker image exists, killing it"
                    docker stop clixx-cont
                    docker rm clixx-cont
                fi
                docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }
 
         //The following section is commented out. Uncomment if required
         stage('Restore CliXX Database') {
             steps {
                 script {
                     sh '''
                     # Activate the virtual environment and run the playbook
                     python3 -m venv python3-virtualenv
                     source python3-virtualenv/bin/activate
                     pip install --upgrade pip
                     pip install boto boto3 botocore
                     ansible-galaxy collection install amazon.aws
                     ANSIBLE_COLLECTIONS_PATHS=python3-virtualenv/lib/python3.*/site-packages/ansible_collections ansible-playbook /home/ec2-user/.jenkins/workspace/Infra_Deployment_Pipelines/Microservices_Image_CI_Pipeline/CliXX_Image_Deployment/deploy_db_ansible/deploy_db.yml -i localhost,
                     deactivate
                     '''
                 }
             }
         }
 
        //stage('Restore CliXX Database') {
        //    steps {
        //        script {
        //            sh '''
        //            # Ensure Python 3.8 is available
        //            python3.8 --version || exit 1  # Exit if Python 3.8 is not found
 
        //            # Create and activate virtual environment with Python 3.8
        //            python3.8 -m venv python3-virtualenv
        //            source python3-virtualenv/bin/activate
 
        //            # Upgrade pip and install necessary packages
        //            pip install --upgrade pip
 
        //            # Install the latest version of the amazon.aws collection
        //            ansible-galaxy collection install amazon.aws --upgrade
 
        //            # Run the Ansible playbook
        //            ansible-playbook /home/ec2-user/.jenkins/workspace/Infra_Deployment_Pipelines/Microservices_Image_CI_Pipeline/CliXX_Image_Deployment/deploy_db_ansible/deploy_db2.yml -i localhost,
 
        //            # Deactivate virtual environment
        //            deactivate
        //            '''
        //        }
        //    }
        //}
 
        stage('Configure DB Instance') {
            steps {
                script {
                    input id: 'confirm', message: 'Is DB creation complete?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Complete?', name: 'confirm']]
                }
                sh '''
                USERNAME='wordpressuser'
                PASSWORD='W3lcome123'
                DBNAME='wordpressdb'
                SERVER_INSTANCE='wordpressdbclixxjenkins.cxm4uiuiw2e06n.us-east-1.rds.amazonaws.com'
                echo "use wordpressdb;" >> ./db.setup
                echo "UPDATE wp_options SET option_value = '$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)' WHERE option_value LIKE 'http%';" >> ./db.setup
                mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE -D $DBNAME < ./db.setup
                '''
            }
        }
 
        stage('Tear Down CliXX Docker Image and Database') {
            steps {
                script {
                    input id: 'confirm', message: 'Tear Down Environment?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm']]
                }
                sh '''
                source python3-virtualenv/bin/activate
                ansible-playbook /home/ec2-user/.jenkins/workspace/Infra_Deployment_Pipelines/Microservices_Image_CI_Pipeline/CliXX_Image_Deployment/deploy_db_ansible/delete_db.yml
                deactivate
                docker stop clixx-cont
                docker rm clixx-cont
                '''
            }
        }
    }
}
 
def getSonarPath() {
    def SonarHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}
 
def getDockerPath() {
    def DockerHome = tool name: 'docker-inst', type: 'dockerTool'
    return DockerHome
}
 